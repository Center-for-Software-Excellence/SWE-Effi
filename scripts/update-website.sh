#!/bin/bash
# update-website.sh - One-click benchmark data update script
# Usage: ./scripts/update-website.sh [scaffold-name] [model-name]
#        ./scripts/update-website.sh --auto
#        ./scripts/update-website.sh --help

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Script directory and project root
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ROOT_DIR="$(dirname "$SCRIPT_DIR")"

# Log functions
log_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }

# Help function
show_help() {
    cat << EOF
SWE-Effi Benchmark Data Update Tool

USAGE:
    $0 [OPTIONS] [SCAFFOLD] [MODEL]

OPTIONS:
    --auto          Process all available data automatically
    --validate-only Only validate files without transforming
    --no-backup     Skip creating backup of existing data
    --verbose, -v   Enable verbose output
    --help, -h      Show this help message

EXAMPLES:
    $0 agentless GPT-4o-mini-2024-07-18                     # Update specific combination
    $0 --auto                                               # Update all available data
    $0 --validate-only                                      # Check all files without updating
    $0 --verbose agentless GPT-4o-mini-2024-07-18           # Update with detailed logs

WORKFLOW:
    1. üìã Validate result files format
    2. üîÑ Transform benchmark data
    3. üåê Generate website data
    4. ‚úÖ Complete update

For more information, see: https://center-for-software-excellence.github.io/SWE-Effi/about/submit-your-entry
EOF
}

# Check if required tools are available
check_dependencies() {
    log_info "Checking dependencies..."
    
    # Check Python
    if ! command -v python3 &> /dev/null; then
        log_error "python3 is required but not installed"
        exit 1
    fi
    
    # Check Node.js and npm (only if we need to run website commands)
    if [ "$SKIP_WEBSITE" != "true" ]; then
        if ! command -v node &> /dev/null || ! command -v npm &> /dev/null; then
            log_error "Node.js and npm are required but not installed"
            exit 1
        fi
    fi
    
    log_success "Dependencies check passed"
}

# Validate project structure
validate_project() {
    log_info "Validating project structure..."
    
    local required_dirs=(
        "benchmark/results/agent-scaffold-stats"
        "scripts"
        "website"
        "website/src"
    )
    
    local required_files=(
        "scripts/transform-benchmark.py"
        "website/package.json"
    )
    
    cd "$ROOT_DIR"
    
    for dir in "${required_dirs[@]}"; do
        if [ ! -d "$dir" ]; then
            log_error "Required directory not found: $dir"
            exit 1
        fi
    done
    
    for file in "${required_files[@]}"; do
        if [ ! -f "$file" ]; then
            log_error "Required file not found: $file"
            exit 1
        fi
    done
    
    log_success "Project structure validation passed"
}

# Removed template creation - data is generated by benchmark system

# Main update function
update_data() {
    local scaffold="$1"
    local model="$2"
    local auto_mode="$3"
    local validate_only="$4"
    local no_backup="$5"
    local verbose="$6"
    
    cd "$ROOT_DIR"
    
    # Build python command
    local python_cmd="python3 scripts/transform-benchmark.py"
    
    if [ "$verbose" = "true" ]; then
        python_cmd="$python_cmd --verbose"
    fi
    
    if [ "$validate_only" = "true" ]; then
        python_cmd="$python_cmd --validate-only"
        log_info "Running validation only..."
        $python_cmd
        log_success "Validation completed successfully!"
        return 0
    fi
    
    if [ "$auto_mode" = "true" ]; then
        python_cmd="$python_cmd --auto"
        log_info "Running auto transformation for all data..."
    elif [ -n "$scaffold" ] && [ -n "$model" ]; then
        python_cmd="$python_cmd --scaffold $scaffold --model $model"
        log_info "Running transformation for $scaffold/$model..."
    else
        python_cmd="$python_cmd --auto"
        log_info "Running transformation for all available data..."
    fi
    
    # Step 1: Transform benchmark data
    log_info "Step 1/2: Transforming benchmark data..."
    if ! $python_cmd; then
        log_error "Failed to transform benchmark data"
        exit 1
    fi
    log_success "Benchmark data transformation completed"
    
    # Step 2: Generate website data
    if [ "$SKIP_WEBSITE" != "true" ]; then
        log_info "Step 2/2: Generating website data..."
        cd "$ROOT_DIR/website"
        
        # Install dependencies if needed
        if [ ! -d "node_modules" ]; then
            log_info "Installing website dependencies..."
            npm install
        fi
        
        # Generate data
        if ! npm run generate-data; then
            log_error "Failed to generate website data"
            exit 1
        fi
        
        log_success "Website data generation completed"
    else
        log_info "Step 2/2: Skipping website data generation (SKIP_WEBSITE=true)"
    fi
    
    # Final success message
    echo ""
    log_success "üéâ Update completed successfully!"
    echo ""
    
    if [ "$auto_mode" = "true" ]; then
        log_info "üìä All available benchmark data has been updated"
    elif [ -n "$scaffold" ] && [ -n "$model" ]; then
        log_info "üìä Data for $scaffold/$model has been updated"
    fi
    
    log_info "üåê Your website data is now up to date"
    
    if [ -d "$ROOT_DIR/website/public/data/benchmark/backup" ]; then
        log_info "üíæ Backup available at: website/public/data/benchmark/backup"
    fi
}

# Parse command line arguments
AUTO_MODE=false
VALIDATE_ONLY=false
NO_BACKUP=false
VERBOSE=false
SCAFFOLD=""
MODEL=""

while [[ $# -gt 0 ]]; do
    case $1 in
        --auto)
            AUTO_MODE=true
            shift
            ;;
        --validate-only)
            VALIDATE_ONLY=true
            shift
            ;;
        --no-backup)
            NO_BACKUP=true
            shift
            ;;
        --verbose|-v)
            VERBOSE=true
            shift
            ;;
        --help|-h)
            show_help
            exit 0
            ;;
        --*)
            log_error "Unknown option: $1"
            show_help
            exit 1
            ;;
        *)
            if [ -z "$SCAFFOLD" ]; then
                SCAFFOLD="$1"
            elif [ -z "$MODEL" ]; then
                MODEL="$1"
            else
                log_error "Too many arguments"
                show_help
                exit 1
            fi
            shift
            ;;
    esac
done

# Validate arguments
if [ -n "$SCAFFOLD" ] && [ -z "$MODEL" ]; then
    log_error "MODEL is required when SCAFFOLD is specified"
    show_help
    exit 1
fi

if [ -n "$MODEL" ] && [ -z "$SCAFFOLD" ]; then
    log_error "SCAFFOLD is required when MODEL is specified"
    show_help
    exit 1
fi

# Main execution
main() {
    echo "üöÄ SWE-Effi Benchmark Update Tool"
    echo "=================================="
    echo ""
    
    # Run checks
    check_dependencies
    validate_project
    
    echo ""
    
    # Run update
    update_data "$SCAFFOLD" "$MODEL" "$AUTO_MODE" "$VALIDATE_ONLY" "$NO_BACKUP" "$VERBOSE"
}

# Handle interrupts gracefully
trap 'echo -e "\n${YELLOW}‚èπÔ∏è  Update cancelled by user${NC}"; exit 130' INT TERM

# Run main function
main "$@"
